<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.spring.boot</groupId>
	<artifactId>image</artifactId>
	<version>0.0.2</version>
	<packaging>jar</packaging>

	<name>image</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.0.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<docker.repository>registry.cn-hangzhou.aliyuncs.com</docker.repository>
		<docker.registry.name>wpk</docker.registry.name>
        <!--<docker.image.prefix>nonokang</docker.image.prefix>-->
	</properties>

	<dependencies>
		<!-- 使用html模板 -->
		<dependency>  
		    <groupId>org.springframework.boot</groupId>  
		    <artifactId>spring-boot-starter-thymeleaf</artifactId>  
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.2</version>
		</dependency>
       <!-- 分页插件 -->  
       <dependency>  
           <groupId>com.github.pagehelper</groupId>  
           <artifactId>pagehelper</artifactId>  
           <version>4.1.6</version>  
       </dependency>  
		<dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!-- 使用热部署，主要是开发时修改后自行启动 -->
        <dependency>  
		    <groupId>org.springframework.boot</groupId>  
		    <artifactId>spring-boot-devtools</artifactId>  
		    <optional>true</optional><!-- optional=true,依赖不会传递，该项目依赖devtools；之后依赖myboot项目的项目如果想要使用devtools，需要重新引入 -->  
		</dependency>  
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
		    <groupId>log4j</groupId>
		    <artifactId>log4j</artifactId>
		    <version>1.2.17</version>
		</dependency>
		<dependency>
			<groupId>org.fusesource</groupId>
			<artifactId>sigar</artifactId>
			<version>1.6.4</version>
		</dependency>
		<dependency>
			<groupId>io.dropwizard.metrics</groupId>
			<artifactId>metrics-graphite</artifactId>
			<version>3.2.6</version>
		</dependency>
	</dependencies>

	<build>
		<finalName>springboot-docker-${project.version}</finalName>
		<!-- Dockerfile文件路径配置 -->
		<resources>
			<resource>
				<directory>src/main/docker</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/Dockerfile</include>
				</includes>
				<targetPath>../docker</targetPath>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!--使用maven命令为：mvn clean package docker:build-->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<!--<version>1.0.0</version>-->
				<version>0.4.12</version>

				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
					<execution>
						<id>tag-image</id>
						<phase>package</phase>
						<goals>
							<goal>tag</goal>
						</goals>
						<configuration>
							<image>${docker.repository}/${docker.registry.name}/${project.artifactId}:${project.version}</image>
							<newName>${docker.repository}/${docker.registry.name}/${project.artifactId}:${project.version}</newName>
						</configuration>
					</execution>
					<execution>
						<id>push-image</id>
						<phase>deploy</phase>
						<goals>
							<goal>push</goal>
						</goals>
						<configuration>
							<imageName>${docker.repository}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName>
						</configuration>
					</execution>
				</executions>

				<!--docker镜像相关的配置信息-->
				<configuration>
					<serverId>docker-aliyun</serverId>
					<registryUrl>${docker.repository}</registryUrl>
					<pushImage>true</pushImage>
					<!--镜像名，这里用工程名-->
					<imageName>${docker.repository}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName>
					<!--TAG,这里用项目版本号，如：latest-->
					<imageTags>
						<imageTag>${project.version}</imageTag>
					</imageTags>
					<dockerDirectory>target/docker</dockerDirectory>
					<!--镜像的FROM，使用java官方镜像-->
					<!--<baseImage>java:8u111-jdk</baseImage>-->
					<!--该镜像的容器启动后，直接运行spring boot工程-->
					<!--<entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>-->
					<!--构建镜像的配置信息-->
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>

			<!--
			google新推出的docker镜像打包工具，使用用maven命令如下
			# Builds to a container image registry.
			$ mvn compile jib:build
			# Builds to a Docker daemon.
			$ mvn compile jib:dockerBuild-->
			<!--<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<version>0.9.0</version>
				<configuration>
					<to>
						&lt;!&ndash;<image>registry.cn-hangzhou.aliyuncs.com/wpk/jibtest</image>&ndash;&gt;
						&lt;!&ndash;<image>aws_account_id.dkr.ecr.region.amazonaws.com/my-base-image</image>
						<credHelper>ecr-login</credHelper>&ndash;&gt;
						<image>gcr.io/my-project/image-built-with-jib</image>
					</to>
				</configuration>
			</plugin>-->

			<plugin>
                 <groupId>org.mybatis.generator</groupId>
                 <artifactId>mybatis-generator-maven-plugin</artifactId>
                 <version>1.3.2</version>
                 <dependencies>
                     <dependency>
                         <groupId>mysql</groupId>
                         <artifactId>mysql-connector-java</artifactId>
                         <version>5.1.29</version>
                     </dependency>
                 </dependencies>
                 <configuration>
                      <!--配置文件的路径-->
                      <configurationFile>${basedir}/src/main/resources/generatorConfig.xml</configurationFile> 
                     <overwrite>true</overwrite>
                 </configuration>
             </plugin>
		</plugins>

	</build>


</project>
